# __author__ = 'lau'
# -*- coding: utf-8 -*-

from math import ceil, log

# 输入内容
codes = [ord(c) for c in "You are my pretty sunshine. laudukang."]
num = sum(codes[i] * 256 ** i for i in xrange(len(codes)))
# 输出数字
print num


# 测试逆转函数
def convert(num):
    if num:
        return chr(num % 256) + convert(num // 256)
    else:
        return ""

# 根据上面的数字进行字符转换
# print convert(num)


def encode(num, depth):
    if num == 0:
        return "_ - _"
    if num <= 8:
        return "_" * num
    return "(" + convert(num, depth + 1) + ")"


# 分解函数
def convert(num, depth=0):
    result = ""
    while num:
        base = shift = 0
        diff = num
        span = int(ceil(log(abs(num), 1.5))) + (16 >> depth)
        for test_base in xrange(span):
            for test_shift in xrange(span):
                test_diff = abs(num) - (test_base << test_shift)
                if abs(test_diff) < abs(diff):
                    diff = test_diff
                    base = test_base
                    shift = test_shift
        if result:
            result += " + " if num > 0 else " - "
        elif num < 0:
            base = -base
        if shift == 0:
            result += encode(base, depth)
        else:
            result += "(%s << %s)" % (encode(base, depth),
                                      encode(shift, depth))
        num = diff if num > 0 else -diff
    return result


# 输出分解结果
# print convert(num)
# print "xiaoshan"


# 以下内容为成功代码
(lambda _, __, ___, ____, _____, ______, _______, ________:
 getattr(
     __import__(True.__class__.__name__[_] + [].__class__.__name__[__]),
     ().__class__.__eq__.__class__.__name__[:__] +
     ().__iter__().__class__.__name__[_____:________]
 )(
     _, (lambda _, __, ___: _(_, __, ___))(
         lambda _, __, ___:
         chr(___ % __) + _(_, __, ___ // __) if ___ else
         (lambda: _).func_code.co_lnotab,
         _ << ________,
         # 插入分解结果
         (((___ << _______) - ((___ << __) + _)) << (((((_ << ___) + _)) << _____) + _____)) + (
             ((((_ << ____) - _) << ___) - _) << (((((_ << ___) + _)) << _____) - (_ << __))) - (
             ((((___ << __) + _) << _____) - _) << ((((_ << ____) + _) << ____))) + (
             ((((___ << __) + _) << ____) + _______) << ((_ << ________) + _______)) - (
             ((((_____ << __) + _) << ____) + ___) << ((_ << ________) - _____)) - (
             ((_______ << _____) + ___) << ((((_ << ____) - _) << ____) + (_ << _))) + (
             ((((___ << __) - _) << _____) + _) << ((_______ << _____) + (_ << ___))) + (
             ((_______ << __) - _) << ((_______ << _____) + (_ << _))) + (
             ((_ << ________) + _) << ((((___ << __) + _) << ____) + _____)) + (
             ((_______ << ____) + ___) << ((((___ << __) + _) << ____) - ___)) + (
             ((((___ << __) - _) << ___) - _) << ((___ << ______) + (_ << __))) - (
             ((((___ << __) + _) << ____) - _____) << ((___ << ______) - _______)) - (
             ((((_____ << __) - _) << ____) - _) << ((((___ << __) - _) << ____) - _)) - (
             ((((___ << __) + _) << ____) - _______) << ((_____ << _____) + (_ << __))) - (
             ((___ << ______) + _____) << ((((_____ << __) - _) << ___) + _)) - (
             (((((_ << ___) + _)) << ____) - ___) << (((((_ << ___) + _)) << ____))) + (
             ((_ << ______) + _) << ((((_ << ____) + _) << ___) - _)) - (
             ((((___ << __) + _) << ____) + _) << ((((_ << ____) - _) << ___) + ___)) - (
             ((_______ << ____) + _) << ((_______ << ____) + ___)) - (
             ((_______ << ____) + ___) << ((((___ << __) + _) << ___) + ___)) - (
             ((_____ << _____) + ___) << ((___ << _____) + (_ << _))) - (
             ((___ << ___) + _) << ((___ << _____) - (_ << __))) + (((_ << ______) + _) << ((_____ << ____) - _)) - (
             ((((___ << __) + _) << ___) + _) << ((((_ << ____) + _) << __))) - (
             ((___ << ___) - _) << ((((_ << ____) - _) << __) + _)) + (
             ((((___ << __) + _) << ___) - ___) << ((___ << ____))) + (
             ((_______ << ___) + _) << ((_____ << ___) + _)) + (
             ((___ << ____) + _) << ((_ << _____) + _)) - (_______ << ((_______ << __) + _)) + (
             ((_______ << __) + _) << (((((_ << ___) + _)) << _))) + (((___ << ___) - _) << ((___ << __))) - (
             ((_____ << __) + _) << ___) + _
         # 插入分解结果
     )
 )
 )(
    *(lambda _, __, ___: _(_, __, ___))(
        (lambda _, __, ___:
         [__(___[(lambda: _).func_code.co_nlocals])] +
         _(_, __, ___[(lambda _: _).func_code.co_nlocals:]) if ___ else []
         ),
        lambda _: _.func_code.co_argcount,
        (
            lambda _: _,
            lambda _, __: _,
            lambda _, __, ___: _,
            lambda _, __, ___, ____: _,
            lambda _, __, ___, ____, _____: _,
            lambda _, __, ___, ____, _____, ______: _,
            lambda _, __, ___, ____, _____, ______, _______: _,
            lambda _, __, ___, ____, _____, ______, _______, ________: _
        )
    )
)
